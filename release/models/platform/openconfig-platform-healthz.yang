module openconfig-platform-healthz {

  yang-version "1";

  // namespace
  namespace "http://openconfig.net/yang/platform/healthz";

  prefix "oc-platform-healthz";

  import openconfig-extensions { prefix oc-ext; }
  import openconfig-types { prefix oc-types; }
  import openconfig-platform { prefix oc-platform; }
  import openconfig-alarm-types { prefix oc-alarm-types; }

  // meta
  organization "OpenConfig working group";

  contact
    "OpenConfig working group
    www.openconfig.net";

  description
    "This model defines health-related variables for components
     within the openconfig-platform model (which defines the
     the /components hierarchy). It is designed to be used in
     conjunction with the gNOI Healthz service (see
     https://github.com/openconfig/gnoi/blob/main/healthz/README.md).

     The health variables included in this model are streamed via
     telemetry interfaces, where gNOI.Healthz is used to retrieve
     further diagnostic and debugging informaton from a network
     device.";

  oc-ext:openconfig-version "0.1.1";

  revision "2023-04-11" {
    description
      "Clarification for healthz state transition and unhealthy-count leaf";
    reference "0.1.1";
  }

  revision "2023-01-23" {
    description
      "Initial healthz variable revision";
    reference "0.1.0";
  }

  identity SYMPTOM_BASE {
    description
      "Base identity for fault symptoms";
  }

  identity SYMPTOM_OVER_THRESHOLD {
    base SYMPTOM_BASE;
    description
      "Indicates that a sensor exceeds its upper operating threshold.";
  }

  identity SYMPTOM_UNDER_THRESHOLD {
    base SYMPTOM_BASE;
    description
      "Indicates that a sensor is measuring below its lower operating
      threshold.";
  }

  identity SYMPTOM_FATAL_FAULT {
    base SYMPTOM_BASE;
    description
      "A fatal fault.";
  }

  identity SYMPTOM_UNCORRECTABLE_MEMORY_ERRORS {
    base SYMPTOM_BASE;
    description
      "Uncorrectable memory errors";
  }

  identity SYMPTOM_TOTAL_MEMORY_ERRORS {
    base SYMPTOM_BASE;
    description
      "Total memory errors";
  }

  identity SYMPTOM_LOGICALLY_MISSING_COMPONENT {
    base SYMPTOM_BASE;
    description
      "Component is logically missing";
  }

  identity SYMPTOM_PHYSICALLY_MISSING_COMPONENT {
    base SYMPTOM_BASE;
    description
      "Component is physically missing";
  }

  identity SYMPTOM_MISWIRED {
    base SYMPTOM_BASE;
    description
      "Component is miswired";
  }

  identity SYMPTOM_UNKNOWN {
    base SYMPTOM_BASE;
    description
      "An unknown symptom";
  }

  identity ACTION_BASE {
    description
      "Base identity for fault symptoms";
  }

  identity ACTION_NON_IMPACTING_RESEAT {
    base ACTION_BASE;
    description
      "A reseat that does not impact operation of the overal device.";
  }

  identity ACTION_WARM_REBOOT {
    base ACTION_BASE;
    description
      "Reboot that does not interrupt device operation.";
  }

  identity ACTION_COLD_REBOOT {
    base ACTION_BASE;
    description
      "Reboot that does interrupt device operation.";
  }

  identity ACTION_IMPACTING_RESEAT {
    base ACTION_BASE;
    description
      "A reseat that does impact operation of the overal device.";
  }

  identity ACTION_POWER_CYCLE {
    base ACTION_BASE;
    description
      "The process of turning a device off completely and then turning it back
      on.";
  }

  identity ACTION_FACTORY_RESET {
    base ACTION_BASE;
    description
      "Restores a device to its original factory settings.";
  }

  identity ACTION_REPLACE {
    base ACTION_BASE;
    description
      "Replace component.";
  }

  grouping platform-health-top {
    description
      "Grouping containing health-related parameters.";

    container healthz {
      description
        "The health of the component. The paramaters within this
        container indicate the status of the component beyond whether
        it is operationally up or down. When a signal is received
        that a component is in an unhealthy state the gNOI.Healthz
        service can be used to retrieve further diagnostic information
        relating to the component.

        The contents of this directory relate only to the specific
        component that it is associated with. In the case that child
        components become unhealthy and this causes a parent component
        to be unhealthy, the new unhealthy status should be reported at
        both components, such that an interested system can take the
        relevant actions (e.g., retrieve the Healthz output, or
        apply mitigation actions).";
      reference
        "https://github.com/openconfig/gnoi/tree/main/healthz";

      container state {
        config false;
        description
          "Operational state parameters relating to component health.";
        uses platform-health-state;
      }

      uses platform-health-faults;
    }
  }

  grouping platform-health-state {
    description
      "Operational state parameters relating to a platform component's
      health.";

    leaf status {
      type enumeration {
        enum UNSPECIFIED {
          description
            "The component's health status has not yet been checked
            by the system.";
        }

        enum HEALTHY {
          description
            "The component is in a HEALTHY state, and is operating
            within the expected parameters.";
        }

        enum UNHEALTHY {
          description
            "The component is in a unhealthy state, it is not
            performing the function expected of it.";
        }
      }
      description
        "The status of the component, indicating its current health.";
      oc-ext:telemetry-on-change;
    }

    leaf last-unhealthy {
      type oc-types:timeticks64;
      description
        "The time at which the component as last observed to be unhealthy
        represented as nanoseconds since the Unix epoch. Unhealthy is defined
        as the component being in a state other than HEALTHY.";
      oc-ext:telemetry-on-change;
    }

    leaf unhealthy-count {
      type uint64;
      description
        "The number of status checks that have determined this component
        to be in an unhealthy state. This counter should be incremented
        when the component transitions from the HEALTHY to any other
        state such that the value reflects the number of times the
        component has become unhealthy.";
      oc-ext:telemetry-on-change;
    }
  }

  grouping platform-health-faults {
    description
      "Grouping containing a component's active faults";

    container faults {
      description
        "Enclosing container for a component's active faults.";

      list fault {
        key "symptom";
        config false;
        description
          "List of active faults, indexed by symptom.
          
          A fault indicates that a component has recently exhibited a symptom.
          Conditions that trigger a symptom may fluctuate. To avoid excessive
          fault creation and deletion, it is recommended that once a fault is
          raised, the device only deletes the fault after a suitable period
          outside of the triggering condition. This will serve to dampen
          events.";

        leaf symptom {
          type leafref {
            path "../state/symptom";
          }
          config false;
          description
           "The symptom that raised this fault";
        }

        container state {
          config false;
          description
            "Operational fault state.";
          uses fault-state;
        }

        uses fault-remediations;
      }
    }
  }

  grouping fault-state {
    leaf symptom {
      type identityref {
        base SYMPTOM_BASE;
      }
      description 
        "The symptom that raised this fault";
    }

    leaf origin-time {
      type oc-types:timeticks64;
      description
        "The time at which the fault first became active.
        This value should not change until the fault is deleted";
    }

    leaf last-detection-time {
      type oc-types:timeticks64;
      description
        "The time at which the fault's underlying condition was last sampled
        and confirmed asserted.";
    }

    leaf occurrences {
      type uint64;
      description
        "The number of times this fault transitioned into the active state.";
    }

    leaf description {
      type string;
      description
        "Description of the fault to assist with debuggability";
    }

    leaf status {
      type enumeration {
        enum UNSPECIFIED {
          description
            "The component's health status has not yet been checked
            by the system.";
        }

        enum ACTIVE {
          description
            "The underlying condition is asserted";
        }

        enum INACTIVE {
          description
            "The underlying condition is not asserted.";
        }
      }
      description
        "The status of the fault, indicates whether the underlying condition
        is actively asserted.";
    }

    leaf severity {
      type identityref {
        base oc-alarm-types:OPENCONFIG_ALARM_SEVERITY;
      }
      description
        "The type of alarm to which the thresholds apply.";
    }
  }

  grouping fault-remediations {
    description
      "Grouping containing a faults recommended remediations";

    container remediations {
      description
        "Enclosing container for a fault's recommended remediations.";

      list remediation {
        key "index";        
        leaf index {
          type leafref {
            path "../state/index";
          }
        }        
        description
          "List of recommended actions to respond to the fault";

        container state {
          config false;
          leaf index {
            type uint64;
            description
            "This index indicates the order in which the actions should be
            applied.";
          }

          leaf action {
              type identityref {
                base ACTION_BASE;
              }
              description
                  "The specific action to be performed";
          }
          leaf target {
            type leafref {
              path "../../../../../../component/config/name";
            }
          }
        }
      }
    }
  }

  augment "/oc-platform:components/oc-platform:component" {
    description
      "Augment healthz information into the /components/component hierarchy.";

    uses platform-health-top;
  }
}
